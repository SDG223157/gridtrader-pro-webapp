# GridTrader Pro - Production Deployment (External DB)
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    default-libmysqlclient-dev \
    pkg-config \
    curl \
    supervisor \
    nginx \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/* \
    && useradd -m -u 1000 appuser

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . /app/

# Create necessary directories
RUN mkdir -p /app/logs \
    /var/log/supervisor \
    /var/log/nginx \
    /app/static \
    /app/templates

# Set up permissions
RUN chown -R appuser:appuser /app

# Create nginx configuration for production
RUN echo 'server { \
    listen 3000; \
    server_name _; \
    client_max_body_size 100M; \
    \
    # Security headers \
    add_header X-Frame-Options "SAMEORIGIN" always; \
    add_header X-XSS-Protection "1; mode=block" always; \
    add_header X-Content-Type-Options "nosniff" always; \
    add_header Referrer-Policy "no-referrer-when-downgrade" always; \
    \
    # Gzip compression \
    gzip on; \
    gzip_vary on; \
    gzip_min_length 1024; \
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/json; \
    \
    location / { \
        proxy_pass http://127.0.0.1:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_connect_timeout 60s; \
        proxy_send_timeout 60s; \
        proxy_read_timeout 60s; \
        proxy_redirect off; \
        proxy_buffering off; \
    } \
    \
    location /static/ { \
        alias /app/static/; \
        expires 30d; \
        add_header Cache-Control "public, immutable"; \
    } \
    \
    location /health { \
        proxy_pass http://127.0.0.1:8000/health; \
        access_log off; \
    } \
    \
    location /ws { \
        proxy_pass http://127.0.0.1:8000; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection "upgrade"; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
    } \
}' > /etc/nginx/sites-available/default

# Create supervisor configuration for production with Celery
RUN echo '[supervisord] \
nodaemon=true \
user=root \
logfile=/var/log/supervisor/supervisord.log \
pidfile=/var/run/supervisord.pid \
\
[program:nginx] \
command=nginx -g "daemon off;" \
autostart=true \
autorestart=true \
stdout_logfile=/var/log/nginx/access.log \
stderr_logfile=/var/log/nginx/error.log \
\
[program:gridtrader] \
command=python main.py \
directory=/app \
user=appuser \
autostart=true \
autorestart=true \
stdout_logfile=/app/logs/app.log \
stderr_logfile=/app/logs/app.log \
environment=PYTHONPATH="/app" \
\
[program:celery-worker] \
command=celery -A tasks worker --loglevel=info \
directory=/app \
user=appuser \
autostart=true \
autorestart=true \
stdout_logfile=/app/logs/celery.log \
stderr_logfile=/app/logs/celery.log \
environment=PYTHONPATH="/app" \
\
[program:celery-beat] \
command=celery -A tasks beat --loglevel=info \
directory=/app \
user=appuser \
autostart=true \
autorestart=true \
stdout_logfile=/app/logs/celery-beat.log \
stderr_logfile=/app/logs/celery-beat.log \
environment=PYTHONPATH="/app"' > /etc/supervisor/conf.d/supervisord.conf

# Create startup script for production
RUN echo '#!/bin/bash \
set -e \
\
echo "🚀 Starting GridTrader Pro Production..." \
\
# Wait for external database \
if [ "$DB_HOST" ] && [ "$DB_HOST" != "localhost" ]; then \
    echo "⏳ Waiting for database at $DB_HOST:${DB_PORT:-3306}..." \
    timeout=60 \
    while ! nc -z "$DB_HOST" "${DB_PORT:-3306}" && [ $timeout -gt 0 ]; do \
        sleep 2 \
        timeout=$((timeout - 1)) \
    done \
    \
    if [ $timeout -eq 0 ]; then \
        echo "❌ Database connection timeout" \
        exit 1 \
    fi \
    echo "✅ Database connection established" \
fi \
\
# Wait for external Redis \
if [ "$REDIS_HOST" ] && [ "$REDIS_HOST" != "localhost" ]; then \
    echo "⏳ Waiting for Redis at $REDIS_HOST:${REDIS_PORT:-6379}..." \
    timeout=30 \
    while ! nc -z "$REDIS_HOST" "${REDIS_PORT:-6379}" && [ $timeout -gt 0 ]; do \
        sleep 2 \
        timeout=$((timeout - 1)) \
    done \
    \
    if [ $timeout -eq 0 ]; then \
        echo "❌ Redis connection timeout - continuing without background tasks" \
    else \
        echo "✅ Redis connection established" \
    fi \
fi \
\
# Create database tables \
echo "🔧 Setting up database..." \
python -c "from database import create_tables; create_tables()" \
\
# Start supervisor \
echo "🎬 Starting services..." \
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' > /start.sh && chmod +x /start.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Switch to root for supervisor
USER root

# Start the application
CMD ["/start.sh"]